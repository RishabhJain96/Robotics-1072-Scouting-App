<?php
/**
 * Robotics Student Information System General API
 * This api currently supports inputing a checkin, getting an array of all checkins, and getting a userID for a given username
 */

class generalController
{
	// constants
	
	// instance variables
	protected $_dbConnection;
	
	public function __construct()
	{
		$this->_dbConnection = dbUtils::getConnection();
		$this->_connection = $this->_dbConnection->open_db_connection();
		date_default_timezone_set('America/Los_Angeles'); // all times are in PST
	}
	
	
	// GENERAL FUNCTIONS
	
	
	/**
	 * description: Sanitizes the input data by escaping for MySQL entry, stripping HTML tags, and trimming whitespace.
	 * 
	 * @param input: The string to be sanitized for entry.
	 * @return string: Returns the sanitized $input data.
	 */
	public function sanitize($input)
	{
		$input = trim($input);
		$input = strip_tags($input);
		$input = mysql_real_escape_string($input);
		//$input = rtrim($input); // superfluous after trim
//		if (strpos($input,">"))
//			$input = preg_replace(">","",$input);
//		if (!get_magic_quotes_gpc()) { 
//			$input=addslashes($input); 
//		}
		return $input;
	}
	
	/**
	 * description: Uses the previously defined sanitize function to iteratively sanitize everything in an array.
	 * 
	 * @param array: The array with the values to sanitize.
	 * @return array: The sanitized array.
	 */
	public function sanitizeArray($array)
	{
		foreach ($array as &$value) {
			$value = $this->sanitize($value);
		}
		return $array;
	}
	
	/**
	 * description: Returns the UserID of the given username.
	 * 
	 * @param username: The username to get the userID of.
	 * @return int: Returns the userID on success, false otherwise.
	 */
	public function getUserID($username)
	{
		$resourceid = $this->_dbConnection->selectFromTable("Users", "Username", $username);
		$array = $this->_dbConnection->formatQueryResults($resourceid, "UserID");
		if (empty($array) || is_null($array[0])) // NOTE: can't destinguish between null value in table and invalid attribute parameter (both return array with single, null element)
		{
			error_log("username $username does not exist");
			//echo "<p>The username $username does not exist!</p>";
			return false;
		}
		
		return $array[0];
	}
	
	// GETTER FUNCTIONS
	
	/**
	 * description: This method should return an array of all the team names in the database.
	 *  
	 * @return array: A one-dimensional array with each element being a string of the team name.
	 */
	public function getAllTeamNames()
	{
		$resourceid = $this->_dbConnection->selectFromTable("Teams");
		$array = $this->_dbConnection->formatQueryResults($resourceid, "TeamName");
		return $array;
	}
	
	/**
	 * description: This method returns a list of all the information stored in the CategoryList table about a particular team.
	 * 
	 * @param teamID: The team to get the information of.
	 * @return array: A one-dimensional array of the info for the given team in the format array("CategoryName" => "CategoryContent"), with CategoryName for each category being the keys and CategoryContent being the values.
	 */
	public function getTeamInfoList($teamID)
	{
		// implementation here
	}
	
	/**
	 * description: This method should return an array of all the team numbers in the database.
	 *  
	 * @return array: A one-dimensional array with each element being a string of the team number.
	 */
	public function getAllTeamNumbers()
	{
		$resourceid = $this->_dbConnection->selectFromTable("Teams");
		$array = $this->_dbConnection->formatQueryResults($resourceid, "TeamNumber");
		return $array;
	}
	
	/**
	 * description: This method writes a new team to the database with the given TeamName and TeamNumber.
	 * 
	 * @param teamName: The team name as a string
	 * @param teamNumber: The team number as a string
	 * @param username: The username of the submitting user.
	 * @return int: Returns the teamID of the newly generated team on success (the teamID is autogenerated in MySQL), or false on failure.
	 */
	public function inputNewTeam($teamName, $teamNumber, $username)
	{
		// logs the date and time that the user submitted the info in both a human-readable and easy-to-manipulate format
		$englishTimestamp = date("l, F j \a\\t g:i a"); // Friday, September 23 at 11:05 pm;
		$numericTimestamp = date("YmdHi"); // 201109232355;
		// implementation here
	}
	
	/**
	 * description: Inputs the info for the given team into the TeamInfo table.
	 * 
	 * @param teamID: The team to enter the info for.
	 * @param infoArr: The information for the given team to be entered into the TeamInfo table with keys being CategoryNames and values being CategoryContent.
	 * @return boolean: true on success, false on failure.
	 */
	public function inputNewTeamInfo($teamID, $infoArr)
	{
		// implementation here
	}
	
	/**
	 * description: Updated the info for the given team into the TeamInfo table.
	 * 
	 * @param teamID: The team to update the info for.
	 * @param infoArr: The information for the given team to be updated the TeamInfo table with keys being CategoryNames and values being CategoryContent.
	 * @return boolean: true on success, false on failure.
	 */
	public function updateTeamInfo($teamID, $infoArr)
	{
		// implementation here
	}
	
}
?>